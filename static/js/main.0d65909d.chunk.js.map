{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pdfMake","vfs","pdfFonts","initialPdfCode","watermark","text","opacity","bold","italics","info","title","author","subject","keywords","content","App","useState","JSON","stringify","code","ReactGA","event","category","action","createPdf","getDataUrl","dataUrl","setPdfUrl","pdfUrl","className","id","height","value","language","options","wordWrap","minimap","enabled","formatOnPaste","formatOnType","onChange","ev","pdfCode","parse","src","frameBorder","Boolean","window","location","hostname","match","initialize","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAQAA,IAAQC,IAAMC,IAASF,QAAQC,IAE/B,IAAME,EAAiB,CACrBC,UAAW,CACTC,KAAM,iBACNC,QAAS,IACTC,MAAM,EACNC,SAAS,GAEXC,KAAM,CACJC,MAAO,eACPC,OAAQ,WACRC,QAAS,sBACTC,SAAU,yBAEZC,QAAS,CACP,sBACA,qHAwDWC,MApDf,WAAgB,IAAD,EACWC,mBAASC,KAAKC,UAAUf,EAAgB,KAAM,IADzD,mBACNgB,EADM,aAEeH,oBAAS,WACnCI,IAAQC,MAAM,CACZC,SAAU,iBACVC,OAAQ,2BAEcvB,IAAQwB,UAAUrB,GAC1BsB,YAAW,SAACC,GAC1BC,EAAUD,UATD,mBAENE,EAFM,KAEED,EAFF,KAyBb,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKC,GAAG,iBACN,kBAAC,mBAAD,CACEC,OAAO,OACPC,MAAOb,EACPc,SAAS,OACTC,QAAS,CACPC,SAAU,KACVC,QAAS,CACPC,SAAS,GAEXC,eAAe,EACfC,cAAc,GAEhBC,SA5BQ,SAACC,EAAIC,GACrBtB,IAAQC,MAAM,CACZC,SAAU,eACVC,OAAQ,wBAGcvB,IAAQwB,UAAUP,KAAK0B,MAAMD,IACrCjB,YAAW,SAACC,GAC1BC,EAAUD,UAuBR,yBAAKI,GAAG,gBACN,4BAAQA,GAAG,uBAAuBpB,MAAM,aAAakC,IAAKhB,EAAQiB,YAAa,QC9DrEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN9B,IAAQ+B,WAAW,kBAEnB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDwHnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0d65909d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { ControlledEditor } from '@monaco-editor/react';\nimport pdfMake from 'pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport ReactGA from 'react-ga';\n\nimport './App.scss';\n\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst initialPdfCode = {\n  watermark: {\n    text: 'test watermark',\n    opacity: 0.05,\n    bold: true,\n    italics: false,\n  },\n  info: {\n    title: 'PDF Document',\n    author: 'john doe',\n    subject: 'subject of document',\n    keywords: 'keywords for document',\n  },\n  content: [\n    'First paragraph 123',\n    'Another paragraph, this time a little bit longer to make sure, this line will be divided into at least two lines',\n  ],\n};\n\nfunction App() {\n  const [code, setCode] = useState(JSON.stringify(initialPdfCode, null, 2));\n  const [pdfUrl, setPdfUrl] = useState(() => {\n    ReactGA.event({\n      category: 'Generating PDF',\n      action: 'Generating initial PDF',\n    });\n    const pdfDocGenerator = pdfMake.createPdf(initialPdfCode);\n    pdfDocGenerator.getDataUrl((dataUrl) => {\n      setPdfUrl(dataUrl);\n    });\n  });\n\n  const createPDF = (ev, pdfCode) => {\n    ReactGA.event({\n      category: 'Updating PDF',\n      action: 'Updating PDF config',\n    });\n\n    const pdfDocGenerator = pdfMake.createPdf(JSON.parse(pdfCode));\n    pdfDocGenerator.getDataUrl((dataUrl) => {\n      setPdfUrl(dataUrl);\n    });\n  };\n\n  return (\n    <div className='App'>\n      <div className='App-content'>\n        <div id='CodeContainer'>\n          <ControlledEditor\n            height='90vh'\n            value={code}\n            language='json'\n            options={{\n              wordWrap: 'on',\n              minimap: {\n                enabled: false,\n              },\n              formatOnPaste: true,\n              formatOnType: true,\n            }}\n            onChange={createPDF}\n          />\n        </div>\n        <div id='PdfContainer'>\n          <iframe id='PdfContainer__iframe' title='pdf-iframe' src={pdfUrl} frameBorder={0} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-168814351-1');\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}